### Autogenerated by service_salt-minion.py ###

##### Primary configuration settings #####
##########################################

# The hash_type is the hash to use when discovering the hash of a file on
# the master server. The default is sha256, but md5, sha1, sha224, sha384 and
# sha512 are also supported.
#
# WARNING: While md5 and sha1 are also supported, do not use them due to the
# high chance of possible collisions and thus security breach.
#
# Prior to changing this value, the master should be stopped and all Salt
# caches should be cleared.
hash_type: {{ hash }}

#####         Logging settings       #####
##########################################
# The location of the minion log file
# The minion log can be sent to a regular file, local path name, or network
# location. Remote logging works best when configured to use rsyslogd(8) (e.g.:
# ``file:///dev/log``), with rsyslogd(8) configured for network logging. The URI
# format is: <file|udp|tcp>://<host|socketpath>:<port-if-required>/<log-facility>
# log_file: file:///dev/log
#
log_file: /var/log/salt/minion

# The level of messages to send to the console.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
#
# The following log levels are considered INSECURE and may log sensitive data:
# ['garbage', 'trace', 'debug']
#
# Default: 'warning'
log_level: warning

# Set the location of the salt master server, if the master server cannot be
# resolved, then the minion will fail to start.
master:
{% for host in master %}
  - {{ host | bracketize_ipv6 }}
{% endfor %}

# The user to run salt
user: minion

# The directory to store the pki information in
pki_dir: /config/salt/pki/minion

# Explicitly declare the id for this minion to use, if left commented the id
# will be the hostname as returned by the python call: socket.getfqdn()
# Since salt uses detached ids it is possible to run multiple minions on the
# same machine but with different ids, this can be useful for salt compute
# clusters.
id: {{ id }}

# The number of minutes between mine updates.
mine_interval: {{ interval }}

{% if source_interface is vyos_defined %}
# The name of the interface to use when establishing the connection to the Master.
source_interface_name: {{ source_interface }}
{% endif %}

# Enables verification of the master-public-signature returned by the master
# in auth-replies.
verify_master_pubkey_sign: {{ 'True' if master_key is vyos_defined else 'False' }}
