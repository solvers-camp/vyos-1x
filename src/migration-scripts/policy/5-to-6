#!/usr/bin/env python3
#
# Copyright (C) 2023 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# T5165: Migrate policy local-route rule <tag> destination|source

from sys import argv
from sys import exit

from vyos.configtree import ConfigTree

if len(argv) < 2:
    print("Must specify file name!")
    exit(1)

file_name = argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

base4 = ['policy', 'local-route']
base6 = ['policy', 'local-route6']
config = ConfigTree(config_file)

if not config.exists(base4) and not config.exists(base6):
    # Nothing to do
    exit(0)

# replace 'policy local-route{v6} rule <tag> destination|source <x.x.x.x>'
#      => 'policy local-route{v6} rule <tag> destination|source address <x.x.x.x>'
for base in [base4, base6]:
    if config.exists(base + ['rule']):
        for rule in config.list_nodes(base + ['rule']):
            dst_path = base + ['rule', rule, 'destination']
            src_path = base + ['rule', rule, 'source']
            # Destination
            if config.exists(dst_path):
                for dst_addr in config.return_values(dst_path):
                    config.set(dst_path + ['address'], value=dst_addr, replace=False)
            # Source
            if config.exists(src_path):
                for src_addr in config.return_values(src_path):
                    config.set(src_path + ['address'], value=src_addr, replace=False)

try:
    with open(file_name, 'w') as f:
        f.write(config.to_string())
except OSError as e:
    print("Failed to save the modified config: {}".format(e))
    exit(1)
