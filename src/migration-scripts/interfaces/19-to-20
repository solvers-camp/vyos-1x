#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from sys import argv
from sys import exit
from vyos.configtree import ConfigTree

if __name__ == '__main__':
    if len(argv) < 2:
        print("Must specify file name!")
        exit(1)

    file_name = argv[1]
    with open(file_name, 'r') as f:
        config_file = f.read()

    config = ConfigTree(config_file)

    for type in ['tunnel', 'l2tpv3']:
        base = ['interfaces', type]
        if not config.exists(base):
            # Nothing to do
            continue

        for interface in config.list_nodes(base):
            # Migrate "interface tunnel <tunX> encapsulation gre-bridge" to gretap
            encap_path = base + [interface, 'encapsulation']
            if type == 'tunnel' and config.exists(encap_path):
                tmp = config.return_value(encap_path)
                if tmp == 'gre-bridge':
                    config.set(encap_path, value='gretap')

            # Migrate "interface tunnel|l2tpv3 <interface> local-ip" to source-address
            # Migrate "interface tunnel|l2tpv3 <interface> remote-ip" to remote
            local_ip_path = base + [interface, 'local-ip']
            if config.exists(local_ip_path):
                config.rename(local_ip_path, 'source-address')

            remote_ip_path = base + [interface, 'remote-ip']
            if config.exists(remote_ip_path):
                config.rename(remote_ip_path, 'remote')

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        exit(1)
